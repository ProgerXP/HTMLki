== HTMLki - seamless templating with the HTML spirit ==

**HTMLki** is a standalone templating engine for PHP 5.6 and up. Unlike most today's templating systems that treat HTML as text and insert their own directives here and there **HTMLki //extends// HTML** by adding variables, loops, language lines, etc. directly into existing HTML constructs. Any valid HTML or PHP code is also a valid HTMLki template.

For example, here's a simple menu in HTMLki:
%%(html)
  <ul $menu>
    <li "$classes">
      <img $icon src=$icon>
      <a "$url" target=$target>$caption</a>
    </li>
  </endul>
%%

This is roughly equivalent to the following PHP code:
%%(php)
  <?php if ($menu) {?>
    <ul>
      <?php foreach ($menu as $item) {?>
        <?php extract($item)?>

        <li <?=$classes ? 'class="'.htmlspecialchars($classes).'"' : ''?>>
          <?php if ($icon) {?>
            <img src="<?=htmlspecialchars($icon)?>">
          <?php }?>

          <a href="<?=htmlspecialchars($url)?>"
             <?=$target ? 'target="'.htmlspecialchars($target).'"' : ''?>>
            <?=htmlspecialchars($caption)?>
          </a>
        </li>
      <?php }?>
    </ul>
  <?php }?>
%%


== Features ==
Because HTMLki is just HTML on steroids, any text editor with HTML/PHP syntax scheme gets highlighting right most of the time.

HTMLki imbues HTML with:
  * ((WP:XSS)) protection - output is HTML-escaped //by default//
  * ((#loops loops and conditions)) - like in the above example: %%(html)<ul $list>%% or %%(html)<if $a == 3>%%
  * ((#attr attribute magic)) - automatic expansion of %%(html)<form file>%% into %%(html)<form enctype="multipart/form-data">%%, %%(html)<div "span-6">%% into %%(html)<div class="span-6">%% and ((#attr more))
  * ((#tags tag magic)):
    # shortcuts (%%(html)<radio>%% into %%(html)<input type="radio">%%)
    # multitags (%%(html)<thead/tr>%% into %%(html)<thead><tr>%%)
    # singletags (%%(html)<textarea />%% into %%(html)<textarea></textarea>%%)
    # and ((#tags more))
  * ((#language language lines)) - simply text wrapped in double quotes: %%(html)<b>"Hello!"</b>%%
  * ((#brackets expressions and variables)) - like %%(html){ date('d.m.y') }%%
  * ((#php PHP code)) - just as you guess: %%(php)<?='string'?>%% - short PHP tags expanded automatically so you don't have to care about any particular %%php.ini%% settings
  * ((#funcs function-tags)) - in form of custom tags like %%(html)<include>%%
  * ((#input)) checking - clearly see what the template accepts: %%$>currentPage@1 int <= $lastPage%%
  * most constructs can be escaped, such as %%""Not a language."%%, %%{{ not_an_expr }%% and %%$$notAVar%%
  * this list is not complete - refer to ((#Syntax)) for all enhancements

The above doesn't require any additional integration code. However, you can tailor HTMLki into a markup ideal for your particular application by adding handlers for specific tags, attributes, etc.

For example, HTMLki can automatically expand %%src%%, %%href%% and %%action%% attributes into full URLs, or have tags like %%(html)<errors>%% that output the list of errors linked to some input field (textarea, selectbox, etc.).


== Download ==
**Grab the ((https://github.com/ProgerXP/HTMLki/archive/master.zip latest version here)).**

**HTMLki is hosted on ((https://github.com/ProgerXP/HTMLki GitHub)).** Report any ((https://github.com/ProgerXP/HTMLki/issues issues)) and make pull requests there.

HTMLki is released **in public domain**. I would appreciate attribution and a backlink, though.


== Syntax ==
HTMLki extends HTML syntax similar to the way ((http://lesscss.org LESS)) extend CSS. Any HTML file is a valid HTMLki file but not vice-versa.

This section describes the entire HTMLki language. It's huge in the details but they stem from a few simple concepts.

=== ((#brackets)) { expr } ===
Expression that is evaluated as PHP code and its result output with the following HTML characters quoting ([[php:htmlspecialchars]] with %%ENT_COMPAT%%):
  * %%<%% -> %%(html)&lt;%%
  * %%>%% -> %%(html)&gt;%%
  * %%&%% -> %%(html)&amp;%%
  * %%"%% -> %%(html)&quot;%%

//If brackets' content follows this pattern: %%[a-z_][a-zA-Z0-9_]%% it is converted into a variable:// %%(php){ echoMe }%% -> %%(php){ $echoMe }%%.

See also ((#dollar)) shortcut.

**Examples** (spaces inside brackets are optional and are often added to improve readability):
%%(html)
  <h2>{ $title }</h2>
  <time datetime="{ gmdate('Y-m-d') }">">
%%

Equivalent to:
%%(php)
  <h2><?php echo htmlspecialchars(($title)?></h2>
  <time datetime="<?=htmlspecialchars((gmdate('Y-m-d'))?>">">
%%

Trailing semicolon is optional:
%%(html)
  <h2>{ $title; }</h2>
%%

==== Dollar shortcut ====
Outputs an escaped variable content; starts with a dollar symbol (%%$%%) followed by a Latin letter and includes all consecutive %%a-z A-Z 0-9 _%% symbols. Standalone %%$%%'s not matching this pattern are output as is.

Equivalent of wrapping this into ((#brackets)): %%{ $var_123 }%%.

**Examples:**
%%(html)
  Hello, <strong>$user</strong>!
  This costs <em>$5</em> (USD).
%%

Equivalent to:
%%(php)
  Hello, <strong>{ $user }</strong>!
  Hello, <strong><?=htmlspecialchars($user)?></strong>!
  This costs <em>$5</em> (USD).
  This costs <em><?='$5'?></em> (USD).
%%

**Attention:** unlike regular PHP string syntax, %%$obj->prop%% and %%$arr[0]%% output not value of the object property or array member but value of %%$obj%% or %%$arr% followed by raw %%->prop%% or %%[0]%% strings. Use PHP insets for this:
%%(html)
  Hello, <strong>{ $user->name }</strong>!
  Hello, <strong>{ $user['name'] }</strong>!
%%

==== {= raw } ====
The same as ((#bracket+s)) expression but doesn't escape HTML characters. Should be used with care as it creates a ((WP:XSS)) possibility.

**Examples:**
%%(html)
  <h2>{= $title }</h2>
  <time datetime="{= gmdate('Y-m-d') }">">
%%

Equivalent to:
%%(php)
  <h2><?php echo $title?></h2>
  <time datetime="<?=gmdate('Y-m-d')?>">">
%%

==== Ruby-like function call ====
Ruby allows omitting brackets around the outermost function call for readability and brevity. A similar feature is supported within %%{ }%% construct:
%%(html)
  Your balance is <b>${ number_format $user->balance }</b>.
%%

Equivalent to:
%%(php)
  Your balance is <b>$<?=number_format($user->balance)?></b>.
%%

Formally:
%%
  {[=][ ]Func PrefixArgs[;]}
  Func    = one or more of \w \ : - >
  Prefix  = one of " ' $ [ \w
  Args    = anything
%%

The above construct is replaced by %%(php)<?=Func(PrefixArgs)?>%% (with escaping added for non-%%{=%% form).

More examples:
%%(html)
  Your balance is <b>{= Locale::currencyAsHTML User::current()->balance }</b>.
  Timezones: { join ', ', \DateTimeZone::listIdentifiers(\DateTimeZone::ANTARCTICA) }.
%%

==== {{ escape ====
Double curly brackets are used to cancel their normal ((#bracket+s)) expression processing.

**Examples:**
%%(html)
  C-like languages use <kbd>{{</kbd> symbols a lot.
%%

Equivalent to:
%%(php)
  C-like languages use <kbd><?='{'?></kbd> symbols a lot.
%%

=== Language ===
Strings enclosed in quotes are first looked up in language strings table and then output. If the table contains no such string the original is used.

Strings may contain substitutions which are replaced with %%:1%%, %%:2%%, etc. For example:
  * %%This contains $count replaces.%% - language string: %%This contains :1 replaces.%%.
  * %%Results #$offset..$count out of { count($results) }.%% - language string: %%Results #:1..:2 out of :3.%%.

Substitution characters are escaped by doubling them: %%This item costs {{$$5 USD}.%% -> "This item costs {$5 USD}.".

**Note:** HTML characters are ((#brackets escaped)) in substitutions. See also ((#attr tag attribute expansion)).

 **Examples:**
%%(html)
  <li>"Home"</li>

  <p class="none">
    "Search query { htmlspecialchars($query) } returned no results."
  </p>
%%

Equivalent to:
%%(php)
  <li><?php echo lang('Home')?></li>

  <p class="none">
    <?=lang('Search query :1 returned no results.', htmlspecialchars($query))?>
  </p>
%%

**Attention:** because these are not PHP strings, %%"Hello, $user->name"%% becomes %%"Hello, :1->name"%%. To reference an object field or array member use %%"Hello, { $user->name }"%%.

==== ""escape ====
Double quotes prevent the following text from being treated as a ((#language)) string. They are output as is.

 **Examples:**
%%(html)
  <em>""Hello, mister Robertson"".</em>
%%

Equivalent to:
%%(php)
  <em><?='"Hello, mister Robertson"'?>.</em>
%%

Inside language strings quotes can be doubled to produce single quotes:
%%(html)
  <em>"Hello, mister ""Robertson""."</em>
%%

Equivalent to:
%%(php)
  <em><?=$this->lang('Hello, mister "Robertson".')?></em>
%%

=== Line merging ===
Often in HTML you have a long line which cannot be broken without unwanted side effects. The trailing-backslash syntax borrowed from C addresses this problem:
%%(html)
  <a href="..." \
      onclick="alert('Okay, clicked.\n\
        Now what?')">
    Link text\
  </a>
%%

Equivalent to:
%%(html)
  <a href="..." onclick="alert('Okay, clicked.\nNow what?')">
    Link text</a>
%%

Example removing extra spaces inside HTML lists which would get in a way:
%%(html)
  <span "list">\
    <a href="...">Item 1</a>\
    <a href="...">Item 2</a>\
  </span>
%%

Equivalent to:
%%(html)
  <span class="list"><a href="...">Item 1</a><a href="...">Item 2</a></span>
%%

Line merging happens before all other processing and can be used with constructs that are normally single-line, like PHP code, ((#language)) strings and ((#brackets)):
%%(php)
  <?='A very\
    long  \
    string'?>
  "Hello, my dear \
    $user!"
  { a(brace, \
      form) }
%%

Equivalent to:
%%(php)
  <?='A verylong  string'?>
  "Hello, my dear $user!"
  { a(brace, form) }
%%

Formally, everything starting from %%\%% until next non-whitespace symbol (on the following line) is removed. %%\%% may be followed by any number of tabs and spaces before the line break. Whitespace before %%\%% is preserved.

==== \\escape ====
Each pair of trailing backslashes is shrunk to a single %%\%% and no line merging happens (unless there is an unpaired %%\%%):
%%
  C-style languages \\
  might also \\\
    cause the \\\\
    leaning toothpick syndrome (LTS).
%%

Equivalent to:
%%
  C-style languages \
  might also \cause the \\
    leaning toothpick syndrome (LTS).
%%

=== Variable assignment ===
Apart from outputting variables using ((#brackets expressions)) and ((#dollar)) shortcut you can set their values - either ((#single-line)) or ((#multi-line)).

//This construct must appear on a line by itself or it's output as is. The leading dollar symbol (%%$%%) can only be preceded with whitespace.//

==== Single-line ====
%%(html)
  $=varName php($expression)
  $*varName 'assign, escape'.'& output'
%%

The second form using asterisk (%%*%%) outputs new %%(php)$varName%% value with ((#brackets escaped HTML)).

**Examples:**
%%(html)
  $=maxLength 50
  <input "text" maxlength=$maxLength>

  $*warning '<p class="warning">Warning!</p>'
  <ul>
  ...
  </ul>
  $warning
%%

Equivalent to:
%%(php)
  <?$maxLength = 50?>
  <input class="text" maxlength=<?=$maxLength?> />

  <?php echo $warning = '<p class="warning">Warning!</p>'?>
  <ul>
  ...
  </ul>
  <?php echo htmlspecialchars($warning)?>
%%

Trailing semicolon is optional:
%%(html)
  $=maxLength 50;
%%

==== Multi-line ====
%%(html)
  $=varName
  <pre>
  Any HTMLki {='code'}
  </pre>
  $^varName
%%

The closing circumflex symbol (%%^%%) can be replaced with an asterisk (%%*%%) to output the new content after assigning it to the variable. **Note:** HTML is not escaped, use ((#dollar)) shortcut if you need to do this.

This is useful for creating sections that can be reused in nested or parent templates. Since these are regular PHP variables you can either pass them to functions or output their previous value before overriding in a child template.

//Proper nesting and matching of opening/closing variable names is not checked or enforced. The variable is assigned only when its closing pair (%%=*var%% or %%=^var%%) is met.//

**Examples:**
%%(html)
  <nav>
    $=menu
    <li><a href=$home>Main page</a></li>
    <li><a href="about">About us</a></li>
    $*menu
  </nav>

  <!-- Another template file: -->
  $=menu
    <li><a href="profile">Your profile</a></li>
    {= $menu }
  $^menu
%%

Equivalent to:
%%(php)
  <nav>
    <?ob_start()?>
    <li><a href="<?=$home?>">Main page</a></li>
    <li><a href="about">About us</a></li>
    <?$menu = ob_get_flush()?>
  </nav>

  <!-- Another template file: -->
  <?ob_start()?>
    <li><a href="profile">Your profile</a></li>
    <?php echo $menu?>
  <?$menu = ob_get_clean()?>
%%

==== $=attribute@tag ====
When variable name is followed by an **at symbol** (%%@%%) it sets either a ((#flagattr flag attribute)) or a ((#shorthand+s)) for given tag. Tag can be empty to set global flag attribute or shorthand - for example, %%$=attr@ disabled%% sets %%disabled%% ((#flagattr flag)) attribute for all tags, such as:
  * %%(html)<input disabled>%% -> %%(html)<input disabled="disabled">%%
  * %%(html)<button disabled>%% -> %%(html)<button disabled="disabled">%%

**((#flagattr Flag attribute)) form:**
%%(html)
  $=chk@input checked

  <input checkbox chk>
  <!-- "checkbox" is an alias of "input" so its attributes work for aliases: -->
  <checkbox chk>

  <!-- Result: -->
  <input type="checkbox" checked="checked">
%%

If attribute name matches with the part before %%@%% the former can be omitted. Both lines have the same effect:
%%(html)
  $=checked@input
  $=checked@input checked
%%

Without defining %%chk%% as a flag attribute its value won't be treated as a boolean flag. Compare:
%%(html)
  <input chk>
  <input chk=1>
  <input chk="woosh">

  <!-- Result: -->
  <input chk="chk">
  <input chk="1">
  <input chk="woosh">

  $=chk@input
  <input chk="chk">
  <input chk="chk">
  <input chk="chk">

  $=chk@input checked
  <input checked="checked">
  <input checked="checked">
  <input checked="checked">
%%

**((#Shorthand+s)) setting form:**
%%(html)
  $=print@meta media=print
  <meta print>
  <!-- Result: -->
  <meta media="print">

  $=ext@a target=external
  <a ext href="http://google.com">
  <!-- Result: -->
  <a target="external" href="http://google.com">

  $=blank@ someattr=
  <foo blank>
  <!-- Result: -->
  <foo someattr="">
%%

==== $>input@checking ==
A default template is an amorphous blob with no input semantics - it takes what is given and in whatever form. Input checking is used to make a template more standalone, more robust to changes outside of it and have a clearly defined interface.

Example:
%%(html)
  $>lastPage        int
  $>currentPage@1   int <= $lastPage
  Current page is $currentPage.
  <a ${ $currentPage > 1 }?>Go back</enda>
  <a ${ $currentPage < $lastPage }?>Go next</enda>
%%

The first two lines are roughly equivalent to:
%%(php)
  if (!isset($lastPage) or !is_int($lastPage)) { throw ...; }
  if (!isset($currentPage)) { $currentPage = 1; }
  if (!is_int($currentPage) or !($currentPage <= $lastPage)) { throw ...; }
%%

By convention, all checks for template's input variables are placed on top of the file. The syntax is similar to other ((#variable)) assignments:
%%
  $>inputVar[@[default]] [type[!] | any] [of smth] [[if ]cond]
%%

The shortest form is just %%$>someVar%% setting **type** to %%any%% and omitting all other parts.

  * **default** specifies the value used in case the input variable is unset. **default** lasts until next whitespace: %%$>number@rand()%16 int%% is fine but %%$>foo@'a b' str%% is invalid. %%@%% without **default** infers the default from **type**. Without %%@...%% part the template fails if the input variable is unset. If input is unset or %%null%% and %%@%% is blank or %%null%% then **type** and **cond** checks are bypassed and the value is left at the type's default (%%@%% alone) or %%null%% (%%@null%%).
  * **type** specifies expected variable type or its alias (below). Without %%!%% the value is attempted to be coerced if its type differs (making %%!%% similar to PHP's //strict_types// declaration). If input variable's type differs and couldn't be coerced - an error occurs if %%@%% part is omitted, else a warning occurs and the default value is used (and checked according to **cond**).
  * **of** starts a type hint/comment lasting until next whitespace (ignored). Examples: %%$>ids array of int%%, %%$>user object of Model\User%%.
  * **if** and **cond** specify additional check(s) as PHP code lasting until line end. The code is evaluated within the same context of the template, failing if on loose false. Without **if** the %%$inputVar%% is prepended: %%$>url str !== ''%% is the same as %%$>url str if $url !== ''%% (ensuring %%(php)$url%% is not blank).

**List of common types, aliases and implied defaults:**
##
    = any special type disabling type checking
    = boolean also %%bool%%; default is %%(php)false%%
    = integer also %%int%%, %%num%%; default is %%(php)0%%
    = float also %%double%%, %%real%%; default is %%(php)0.0%%
    = string also %%str%%; default is %%(php)''%%
    = array also %%hash%%, %%map%%; default is %%(php)array()%%
    = object also %%obj%%; default is %%(php)new stdClass%%
    = callable note that not only closures are callable but also things like %%(php)'trim'%%, %%(php)['My', 'method']%% and %%(php)$obj%% (if implements %%(php)__invoke()%%)
    = resource also %%res%%
    = other %%null%%, %%scalar%%, %%dir%%, %%file%%, etc.
##

A "type" is a name for which a top-level PHP function %%(php)is_XXX($value)%% is defined. Types without defaults use %%(php)null%% as one.

**List of coercion rules:**
##
    = bool if null or scalar: if string representation is one of %%(php)'' 0 1%% then %%(php)(bool) $value%%
    = integer if null or //FILTER_VALIDATE_INT//: %%(php)(int) $value%%
    = float if null or integer or //FILTER_VALIDATE_FLOAT//: %%(php)(float) $value%%
    = string if null or scalar: %%(php)(string) $value%%
##

Other types and other cases of the listed types are not coercible and fail the input check.

**Attention:** //FILTER_XXX// (of PHP [[php:filter_var]]()) trim their input so that %%(php)"\t123"%% is seen as a valid //int// and //float//.

==== $+compartment ====
Compartments are regular variables that are automatically passed between connected templates while accumulating values. Typical examples are "styles" and "scripts" on a webpage - one template may add the styles it depends on, another template - another set of styles until the final template outputs these compartments to the appropriate places on the page (%%(html)<head>%% and %%(html)<body>%%).

A compartment variable is defined using a syntax similar to ((#multi))-line assignment, terminating with a %%$+var@key%% line. If %%key%% is set new item is created only if %%(php)$var%% has no such key or it's null. %%(php)$var%% is automatically created as or converted to an array.

Two main ((#func functions)) power this mechanism: 

  * //((#Include))// merges compartments of the included template with the calling template's
  * //((#Rinclude))// takes compartments from the calling template without changing them

**Note:** if there's no output between the two lines the variable is prepared but no item is created:
%%(html)
  $=head
  $+head
%%

Roughly equivalent to this PHP 7.0+ code:
%%(php)
  $head = (array) $head ?? [];
%%

==== Example ====
Let's consider this "main" template (called by a frontend script/controller with page-specific variables):
%%(html)
  $=head
    <link "this-page-styles.css">
  $+head

  <?var_dump($head)?>

  <table $rows>
    <include "inner">
  </endtable>

  <?var_dump($head)?>

  <rinclude "outer">
%%

The first %%(php)var_dump()%% indicates that %%(php)$head%% is an array with at least one member: %%(php)'<link href="..." ...>'%%. If this template has been //((#Rinclude))//'d by some other, %%(php)$head%% may contain more items.

Example of the %%inner%% template:
%%(html)
  <tr>
    <td>$item</td>
  </tr>

  $=head
    <script "super-table.js">
  $+head@super-table
%%

The second %%(php)var_dump()%% indicates that %%(php)$head%% has at least two members now: the old %%(php)'<link ...>'%% and a new %%(php)'<script src="..." ...>'%%. However, even if %%inner%% is included many times there will be only one %%script%% entry because of the key used: %%@super-table%%.

**Note:** as a rule, %%@key%% must be unique across all connected templates - if values for this key are different it's hard to predict which version will survive multiple inclusions. 

The %%outer%% template might start with this snippet:
%%(html)
  $>head@   array
  <!DOCTYPE html>
  <html>
    <head>  
      <each $head>
        {= $item }
      </each>
      <!-- or even just: -->
      {= join $head }
%%

The ((#input)) checking line is optional and enforces %%(php)$head%%'s type as well as sets its default value (empty array).

==== $$=escape ====
It's possible to escape the ((#variable)) assignment expressions by doubling the leading dollar symbol (%%$%%).

Note that the assignment is only recognized when it occurs on a line by itself so you don't need to escape it if it doesn't (and escaping won't be removed there).

**Example:**
%%(html)
  This is not an assignment:
$$=var

Inline escaped dollar symbol: $$=var
%%

Equivalent to:
%%(php)
  This is not an assignment:
  <?='$$=var'?>

  Inline escaped dollar symbol: <?='$=var'?>
%%

Another example:
%%(html)
  $=multilineVar
  Content goes here...
  $$^multilineVar
  ...and continues here as well.
  Now it ends:
  $^multilineVar
%%

Equivalent to:
%%(php)
  <?ob_start()?>
  Content goes here...
  $^multilineVar
  and continues here as well.
  Now it ends:
  <?$multilineVar = ob_get_clean()?>
%%

=== ((#php)) <?php code?> ===
It's possible to use shorthand PHP tags regardless of ((http://www.php.net/manual/en/ini.core.php#ini.short-open-tag short_open_tag)) configuration. The following tags are recognized:
  * %%(php)<?some($code)?>%% -> %%(php)<?php some($code)?>%%
  * %%(php)<?php some($code)?>%% -> %%(php)<?php some($code)?>%% (the same)
  * %%(php)<?=some($code)?>%% -> %%(php)<?php echo some($code)?>%%

PHP code snippets can be used along with normal HTML or HTMLki constructs; for example:
%%(php)
  <ul "listing" $list>
    <li><a rel="nofollow">{ $title }</a></li>
    <?=Listing::nested($nested)?>
  </ul>
%%

=== Tags ===
Tags in HTMLki are just like normal HTML tags with certain additions:
  1. ((#defattr Default attribute names)) - lets you omit %%src=%% for images, %%action=%% for forms, %%class=%% for other tags, etc.
  1. ((#flagattr Flag attributes)) - it's possible to specify %%readonly%%, %%checked%%, %%submit%% (%%(html)type="submit"%%) with a value alone and the attribute name will be guessed.
  1. ((#attr Attribute expansion)) - lets you use PHP variables or expressions in attribute names and values and omit surrounding quotes around attribute values: %%(html)<radio "radio {$i % 2 ? 'even' : 'odd'}" checked=checked id=$ctlID>%%.
  1. ((#Multitags)) - lets you avoid %%(html)<table><tbody><tr class="odd">%% by using %%(html)<table/tbody/tr "odd">%%. Works for closing tags as well.
  1. ((#ts Shortcut tags)) - create %%(html)<input type="checkbox" name="autologin">%% from just %%(html)<checkbox "autologin">%%.
  1. ((#single Single tag convertions)) - automatic turning of %%(html)<link>%% into %%(html)<link />%% in XHTML and of %%(html)<textarea rows=10 />%% into %%(html)<textarea rows="10"></textarea>%% in XHTML/HTML 5.
  1. ((#Loops)) - turns a tag into a container for a set of items and adds "else-if" and "else" branches to such tags.
  1. ((#func Function calling)) - HTMLki tags (%%(html)<tag attr="value">%%) don't have to be defined in the HTML spec, they can be user-defined functions such as %%(html)<file "upload">%%, %%(html)<each $list>%% or %%(html)<include "partials/sidebar">%%.

By default all tags are single-line. If multi-line tags are enabled, the %%<a /))...'>%% below is treated as a single tag:
%%(html)
  <script>
    if (s.match(/<a /)) {
      s += '>'
%%

To avoid ambiguity in closing %%>%% detection, surround %%>%% with spaces to make it part of the attribute string:
  1. %%<if a->b>%% is a single tag (a special exception)
  1. %%<if a > b>%% is a single tag
  1. %%<if a >= b>%% is a single tag
  1. %%<if a>b>%% are a tag %%<if a>%% followed by plain text %%b>%%


==== ((#attr)) Attributes ====
HTMLki extends HTML format for specifying tag attributes (%%(html)attr="value" second="yet another"%%) with the following:
  1. Array variables for ((#loops)) are specified after the tag name: %%(html)<div $array $another>%%
  1. ((#defattr Default attributes)) are specified the same way: %%(html)<img "src" "class">%%. They must go after array variables for tags not listed in **loopTags** config option: %%(html)<img $glyphs "src" $thumbs "class">%% **is not** the same as %%(html)<img "src" "class" $glyphs $thumbs>%% (loop won't be recognized) unless %%img%% is listed in **loopTags** - in this case both examples have the same effect.
  1. After the above go regular attributes.

**Regular attributes** are separated using spaces (just like in HTML) and generally have %%key=value%% form. However:
  1. The **key** part can be omitted creating an unnamed attribute which can be used by some ((#func tag functions)) (similar to passing parameters to functions by index in PHP: %%(php)foo('a1', $a2)%%).
  1. You can create unnamed attribute beginning with either %%$%% or %%"%% - to avoid confusion with ((#loops)) and ((#defattr default attributes)) use %%=$value...%% form (thus %%=%% is explicit but **key** is empty).
    * //once the first such attribute is present you don't have to prefix all the following with %%=%% as loops/default attributes have to go before regular attributes and won't be recognized at later positions anyway.//
  1. Both **key** and **value** parts can't contain spaces unless one of them or both are wrapped in quotes (again, just like in HTML but HTML only allows wrapping of values while HTMLki lets you wrap both): %%(html)<img src=controls/button.gif>%%, %%(html)<img src="templates/Calm Gray/button.gif">%%. Like ((#language)) strings such attributes can contain variables or nested PHP expressions: %%(html)<radio "$checked">%% (contents of %%(php)$checked%% variable is used both as attribute name and value; if it's empty nothing will be output). Note that without the quotes this will pass a ((#loops list variable)).
    * //with usual tags keys are regular HTML attributes so spaces in them are not used; however, some ((#func user functions)) might use them.//
    * watch out for unwanted substitutions: %%(html)<input pattern="^\d{4}$">%% - in order for %%{4}%% to be not treated as a code inset, double the opening bracket: %%^\d{{4}$%%.
  1. Similar to above: **key** and/or **value** can be wrapped in curly brackets (%%{ }%%) instead of quotes to execute custom PHP code (must return a scalar, not an array). This works similarly to ((#bracket+s)) construct (%%{ foo('bar') }%%). HTML symbols will be automatically quoted unless the opening bracket is immediately followed by an equality sign (%%=%%): %%(html)<img src={ urlOf('My Template', 'btn.gif') }>%% (spaces inside brackets are optional). More examples:
    * %%(html)<radio { $checked ? 'checked' : '' }>%%
    * %%(html)<a {$anchorUsingName ? 'name' : 'id'}=$anthor>%% - this will output %%(html)<a name="some_anchor">%% if %%(php)$anchorUsingName%% is **true** and %%(html)<a id="some_anchor">%% if it's **false**
    * %%(html)<a attr={=$asIs}>%% - the value of %%(php)$asIs%% variable is inserted into %%attr%% attribute of %%(html)<a>%% tag but it's not escaped and thus if it contains %%"%% or other special symbol the markup will be broken.
    * %%(html)<input { $off ? 'autocomplete=off' : '' }>%% - likely an error as the string is used both as key and value producing %%(html)<input autocomplete="off=autocomplete=off">%%. Correct: %%(html)<input autocomplete={ $off ? 'off' : null }>%%.
    * most ((#funcs custom functions)) only support simple key format: %%(html)<each $list { ++$key }=...>%% would be given raw %%{ ++$key }%% as a string attribute, not incremented %%$key%%'s value.
  1. If neither %%{ }%% nor %%"%% are used to wrap //key// or //value// they are processed as if wrapped in %%"%% but ending on a first whitespace or %%>%% character.
    * %%(html)<input value=$obj->prop>%% - same as %%(php)<input value="<?=$obj-?>">prop>%%. Correct: %%(html)<input value={ $obj->prop }>%% or %%(html)<input value="{ $obj->prop } and foo">%%.
    * %%(html)<input value=$a['k']>%% - same as %%(php)<input value="<?=$a?>['k']">%%. Correct: %%(html)<input value={ $a['k'] }>%% or %%(html)<input value="{ $a['k'] } and foo">%% (but not %%(html)value="$a[k]"%% or %%(html)value="$a['k']"%% as these are not PHP strings).

**Note:** HTML characters are ((#brackets escaped)) in substitutions. See also ((#attr tag attribute expansion)).

===== ((#defattr)) Default attributes =====
If a ((#tag+s)) attribute is unnamed and wrapped in quotes it's treated as a value for some commonly used attribute of that particular tag. For example, %%(html)<img>%% doesn't make sense without %%src%%. One tag can have multiple default attributes.

**List of default attributes per tag:**
##
    = a %%href%%, %%class%%
    = base %%href%%
    = button %%name%%, %%class%%
    = embed %%src%%, %%class%%
    = form %%action%%, %%class%%
    = img %%src%%, %%class%%
    = input %%name%%, %%class%%
    = link %%href%%
    = meta %%name%%, %%content%%
    = object %%data%%, %%class%%
    = optgroup %%label%%, %%class%%
    = option %%value%%
    = param %%name%%, %%value%%
    = script %%src%%
    = select %%name%%, %%class%%
    = source %%src%%
    = style %%media%%
    = textarea %%name%%, %%class%%
    = track %%src%%
##

Others have a single default attribute - %%class%%; for example: %%(html)<span "highlight">Notice</span>%% -> %%(html)<span class="highlight">%%.

===== ((#flagattr)) Flag attributes =====
In HTML attributes like %%readonly%% and %%selected%% can be either unspecified or have the same value as their name. With HTMLki you can specify them as //flags// where empty string or string "0" are **false** and everything else is **true**. They will be expanded to full HTML values.

**List of flag attributes per tag:**
##
    = area %%nohref%%
    = audio %%autoplay%%, %%controls%%, %%loop%%
    = button %%autofocus%%, %%formnovalidate%%
    = command %%checked%%
    = details %%open%%
    = frame %%noresize%%
    = hr %%noshade%%
    = img %%ismap%%
    = input %%autofocus%%, %%checked%%, %%readonly%%, %%formnovalidate%%, %%required%%
    = form %%action%%, %%class%%
    = keygen %%autofocus%%, %%challenge%%, %%disabled%%
    = option %%selected%%
    = object %%declare%%
    = script %%defer%%
    = select %%multiple%%
    = style %%scoped%%
    = th, td == %%nowrap%%
    = textarea %%readonly%%
    = time %%pubdate%%
    = track %%default%%
    = video %%autoplay%%, %%controls%%, %%loop%%, %%muted%%
##

Also, the following attribute can be used in any tag:
##
    = disabled HTML-compliant targets are %%(html)<command>%%, %%(html)<input>%%, %%(html)<optgroup>%%, %%(html)<option>%%, %%(html)<select>%% and %%(html)<textarea>%%.
##

In some tags it's possible to define attributes given just their value. For example, %%(html)<form post enctype="text/plain">%% is the same as %%(html)<form method="post" enctype="text/plain">%% (note that %%(html)<form "post">%% would be %%(html)<form action="post">%% because of ((#defattr default attributes))).

((#shorthands))

**List of shorthand values per tag:**
##
    = a %%new%% expands into %%(html)target="_blank"%%
    = button **type**: %%button%%, %%reset%%, %%submit%%; %%(html)type="button"%%, %%(html)value="1"%% are implied
    = command **type**: %%checkbox%%, %%command%%, %%radio%%
    = input **type**: %%button%%, %%checkbox%%, %%file%%, %%hidden%%, %%image%%, %%password%%, %%radio%%, %%reset%%, %%submit%%, %%text%%; %%selectonfocus%% is expanded into %%(html)onfocus="this.select()"%%; %%(html)type="text"%% is implied
    = keygen **keytype**: %%rsa%%, %%dsa%%, %%ec%%
    = form **method**: %%get%%, %%post%%; aliases %%file%%, %%upload%% and %%multipart%% are expanded into %%(html)enctype="multipart/form-data"%%; %%(html)method="post" accept-charset="utf-8"%% are implied
    = li **type**: %%disc%%, %%square%%, %%circle%%
    = link %%(html)rel="stylesheet"%% is implied
    = param **valuetype**: %%data%%, %%ref%%, %%object%%
    = script **xml:space**: %%preserve%%; %%(html) type="text/javascript"%% is implied
    = style %%(html) type="text/css"%% is implied
    = textarea %%selectonfocus%% is expanded into %%(html)onfocus="this.select()"%%; %%(html)cols="50" rows="5"%% are implied
##

Also, the following attributes can be used in any tag:
##
    = align %%left%%, %%center%%, %%right%%, %%justify%%, %%top%%, %%middle%%, %%bottom%%
    = dir %%ltr%%, %%rtl%%
##

==== Multitags ====
Slash symbol (%%/%%) is used to separate multiple tag names inside a single tag construct. All attributes are related to the last tag in the chain. Preceding tags cannot be given attributes using this form; however, their ((#shorthands implied attributes)) (e.g. %%(html)method="post"%% for %%(html)<form>%%) are output.

**Example:**
%%(html)
  <table/thead/tr class="head">
    <th>#</th>
    <th>Title</th>
  </tr/thead>
  <tbody>
    ...
  </tbody/table>
%%

%%(html)
  <form/p "info">
    <label>"Your name:" <input "name"></label>
  </p/form>
%%

Equivalent to:
%%(html)
  <table>
    <thead>
      <tr class="head">
        <th>#</th>
        <th>Title</th>
      </tr>
    </thead>
    <tbody>
      ...
    </tbody>
  </table>
%%

%%(html)
  <form method="post">
    <p class="info">
      <label>Your name: <input type="text" name="name"></label>
    </p>
  </form>
%%

==== ((#ts)) Shortcut tags ====
Allows creating custom tags by aliasing other tags and possibly setting attributes when referred to them this way.

**Example:**
%%(html)
  <get "settings">
    <checkbox "autologin">
  </get>
%%

Equivalent to:
%%(html)
  <form method="get" action="settings">
    <input type="checkbox" name="autologin">
  </form>
%%

This creates complete aliases so ((#defattr default attributes)), ((#flagattr flags)), etc. can be used with these shortcuts as well.

Attributes defined in that tag take priority over such aliased attributes so that %%(html)<get "settings" method=post>%% becomes %%(html)<form method="post" action="settings">%%.

**List of shortcut tags:**
##
    = password %%(html)<input type="password">%%
    = hidden %%(html)<input type="hidden">%%
    = file %%(html)<input type="file">%%
    = check %%(html)<input type="checkbox">%%
    = checkbox %%(html)<input type="checkbox">%%
    = radio %%(html)<input type="radio">%%
    = submit %%(html)<button type="submit">%%
    = reset %%(html)<button type="reset">%%
    = get %%(html)<form method="get">%%
    = post %%(html)<form method="post">%%
##

==== ((#func)) Tags-functions ====
%%(html)<[/]tag[ attributes....]>%% construct is a function call that can be intercepted. By default if no implementation is defined an HTML tag is output with that name and with all attributes joined together, respecting ((#loops)) if any list variable is given.

**Function and tag names are converted to lower case:** %%(html)<SpAn>%% is identical to %%(html)<span>%%.

Each function is given a %%(php)TagCall%% object with the list of given attributes, variables in the current template scope and other information.

There are 3 tag forms: opening (%%(html)<tag>%%), closing (%%(html)</tag>%%) and single (%%(html)<tag />%%); by default they affect the resulting HTML tag form and the closing tag.

If it's a block function (like %%(html)<each>%% or %%(html)<if>%%) it can return an array to be iterated over; each member is an array of variables to be defined in each iteration. See also ((#loops)).

See also ((#funcs List of standard functions)).

=== Loops and conditions ===
Any HTML tag can be converted into a loop by listing one or more variables or expressions after its tag name, possibly mixed with ((#defattr default attributes)):
%%(html)
  <ol $headers>
    <li>$key = $value</li>
  </ol>
%%

To use an expression simply wrap it inside %%${ ... }%%. Also, it's possible to specify prefix that will be added to every loop variable so they don't collide with nested loops. If none is specified variables are defined with their original names.

((#prefix))
Let's assume that %%(php)$headers%% is an array of arrays containing **key** and **value** keys:
%%(html)
  <ol ${ array_filter($headers) }>
    <li>$key = $value</li>
  </ol>

  <!-- With a prefix: -->
  <ol $prefix{ array_filter($headers) }>
    <li>$key_prefix = $value_prefix</li>
  </ol>
%%

When a non-traversable variable (neither an array nor an object implementing %%(php)Traversable%% interface) is looped over it gets converted to an array like this:
  * **null** and **false** become an empty array.
  * everything else becomes an array with one member - that variable.

%%(html)
  <div ${ isAuthenticated() }>
    "Hello, $userName!"
  </div>
%%

==== ((#boolsuf)) Boolean suffix ==
Often you want to iterate once and only if the value is loosely true. For this, append %%?%% after the list variable:
%%(html)
  <div ${ isAuthenticated() }?>
%%

Equivalent to:
%%(html)
  <div ${ !!isAuthenticated() }>
%%

Or to:
%%(php)
  <?php if (!!isAuthenticated()) {?>
    <div>
%%

Without %%?%% if %%(php)isAuthenticated()%% returns %%(php)0%% or %%(php)''%% the %%(html)<div>%% will be still output according to the ((#loops rules)). The question mark forces a boolean cast (using PHP rules) before array convertion, resulting in either 0 or 1 iterations and no ((#lv loop variables)).

It works the same with variables: %%(html)<div $isAuth?>%%. Undefined variables trigger errors as usual.

There must be no spaces before %%?%% or it will be treated as a separate attribute:
%%(html)
  <div ${ isAuthenticated() } ?>
  <div $isAuth ?>
%%

==== ((#lv)) Variables ====
The following variables are defined after the loop has started iterating:
  * **$key_//prefix//** - key of list item being iterated over.
  * **$i_//prefix//** - similar to %%(php)$keyPREFIX%% but contains 0-based index of currently iterated item regardless of its array key.
  * **$isFirst_//prefix//**, **$isLast_//prefix//** - boolean variables indicating if current iteration is a first/last one.
  * **$isEven_//prefix//** (0th, 2nd, 4th, etc.),, **$isOdd_//prefix//** (1st, 3rd, 5th, etc.) - one of these boolean variables will be true on any iteration.
  * **$item_//prefix//** - current item as it is - it can be of any type.
  * if current item is **an array** all of its members are defined as if they were [[php:extract]]()'ed with added //prefix//; those that have wrong keys for this are still accessible using **%item**.

//((#Prefix))// above stands for a string given to the tag along with the loop expression/variable. If it's empty then no separating underscore (%%_%%) is present.

No variables are created if prefix is %%_%% or ((#boolsuf boolean suffix)) is used - such loops won't interfere with other loops' variables. In this example only //tbody//'s variables are created but //td//'s and //ul//'s are not:
%%(html)
  <tbody $rows>
    <td $flag?>
      <ul $_{ getItems() }>
%%

==== Branching ====
Each loop can contain zero or more //else// branches. Unless it's an ((#il implicit loop tag)) each loop must be terminated with a symmetrical %%(html)</endXXX>%% form where **XXX** must match the starting tag. The ending **XXX** tag is output if both the accepted //else// branch and //end// had tag names: %%(html)<elseXXX>...</endXXX>%%.

%%(html)
  <ul $menu>
    <li><a "$url">$title</a></li>
  <elseul $secondaryMenu "secondary">
    <li><a "$url">$title</a></li>
  <else>
    <p "none">"No menu items defined."</p>
  </endul>
%%

For this reason all //else// branches with list(s) must have the same opening tag (%%elseul%% above) or tag nesting will be broken. For example:
%%(html)
  <ul $menu>
    ...
  <elsediv $secondary>
    ...
  <else>
    <p "none">...</p>
  </endul>
%%

In this example if there were no %%(php)$menu%% items %%(html)<div>...</ul>%% is generated thus breaking element nesting. This won't happen for %%(html)<p "none">%% because it has no lists (parameter starting with %%$%%).

Proper code would be:
%%(html)
  <ul $menu>
    ...
  <elseul $secondary>
    ...
  <else>
    <p "none">...</p>
  </endul>
%%

Or:
%%(html)
  <ul $menu>
    ...
  <else>
    <div $secondary>
      ...
    <else>
      <p "none">...</p>
    </enddiv>
  </endul>
%%

The difference between %%(html)</endul>%% and %%(html)</ul>%% is that the former ends looping and outputs the closing tag if at least one iteration had taken place while the latter always outputs the closing tag.

Both %%(html)<else>%% and %%(html)<end>%% can omit the tag name - this is usually used with ((#funcs custom tags)) like //((#Each))// or //((#If))//. In this case no ending tag is output even if a list has been iterated over.

HTMLki errors if opening tag doesn't match %%(html)<endXXX>%% tag (no such check is performed for non-list tags). The check is skipped for pairs ending on %%(html)</end>%% so it's recommended to use %%(html)</endXXX>%% or %%(html)</XXX>%% (for ((#funcs functions))) where possible:
%%(html)
  <each $a>
    <if $key>
      ...
    </if>
  </each>

  <each $a>
    <if $key>
      ...
    </endif>
  </endeach>

  <!-- it won't be detected if the opening <each> and <if> change places -->
  <each $a>
    <if $key>
      ...
    </end>
  </end>
%%


==== ((#sl)) Single-tag loops ====
Sometimes it's convenient to ((#loop+s)) over a single tag instead of a ((#bl block)). Let's assume that we have an array of stylesheets:
%%(php)
  array(
    'screen' => 'styles.css',
    'print' => 'print.css',
  );
%%

We can output them all using this line:
%%(html)
  <link $styles "$item" rel=$key_styles />
%%

//Even though this looks like a XHTML tag the presence of trailing %%/%% is controlled by HTMLki and can be enabled or disabled using its preferences without affecting the original template.//

==== ((#bl)) Block loops ====
Unlike ((#sl single-tag loops)) block loops operate on an arbitrary chunk of code wrapped into %%(html)<tag>...</endtag>%% pair. ((#lv Regular variables)) are defined both inside these blocks and after them, although the latter should be considered an undesirable side-effect and might be changed in future.

==== ((#il)) Implicit loops ====
HTMLki can be configured to treat specific tags as always looping even if they don't have any PHP variables passed. Of ((#funcs standard functions)) //((#If))// and //((#Each))// are such tags.

Both of the following examples have identical effect except the first works even when //((#If))// isn't configured as an implicit loop tag:
%%(html)
  <if $var = is_scalar($var)>
    $$var is scalar.
  </endif>
%%

%%(html)
  <if is_scalar($var)>
    $$var is scalar.
  </if>
%%

=== ((#single)) Single tags ===
HTMLki can automatically treat certain tags as single tags requiring no ending tag and convert single tags specified in the template into their full forms with empty body if they're not real short tags per HTML specification.

**Examples:**
%%(html)
  <link href=styles.css>
  <script src=engine.js />
%%

Equivalent to:
%%(php)
  <link href="styles.css" />
  <script src="engine.js"></script>
%%

You can still write regular HTML if you want which is equivalent to the code above.

**Default list of single tags:** %%area%%, %%base%%, %%basefont%%, %%br%%, %%col%%, %%frame%%, %%hr%%, %%img%%, %%input%%, %%link%%, %%meta%%, %%param%% - plus these ((#funcs functions)): //((#Lang))//, //((#Include))//.


== ((#funcs)) Standard functions ==

=== Include ===
%%(html)
  <include "partials/sidebar" expanded=1 user>
%%

//Include// creates a new template, passes it certain variables according to the given ((#attr regular attributes)) and merges its ((#compartment)) variables on return.

**Attribute syntax:**
%%(html)
  <include "..." [0]>
  <include "..." [0 arrayvar] [[srcvar-]tplvar][=value] [...]>
%%

  * with no arguments passes the same variables defined by the time //Include// is called (like PHP's //include//)
  * if the only argument is %%0%%, passes no variables
  * if %%0%% is followed by an argument, that one argument is an array of values (its keys may be overridden by subsequent arguments)
  * other arguments: %%var=val%% sets a scalar inside the template, %%src-tpl%% passes %%$src%% from this scope as %%$tpl%% to the template, %%tpl%% passes %%$tpl%% under the same name (like %%tpl-tpl%%)
  * undefined variables generate a warning

Example of setting a non-scalar using a temporary variable (%%my/tpl%% gets %%(php)$theNameInside%%):
%%(html)
  $=a   array(1, 2, 3)
  <include "my/tpl" a-theNameInside>
%%

**((#Loop+s))ing form:**
%%(html)
  <include $list [$list_2 [...]] "tpl_name" [attributes...]>
%%

Includes another template file as if its contents was directly placed at the point of %%(html)<include>%%.

=== Rinclude ===
%%(html)
  $=body
    <h1>Welcome</h1>
  $+body

  <rinclude "page">
%%

//Reverse include// - the same as //((#Include))// except that ((#compartment)) variables are passed forward to the included script and are not merged on return.

=== Each ===
%%(html)
  <each $items "item">
    <b>Key:</b>    $key_item,
    <b>Index:</b>  $i_item,
    <b>Value:</b>  $item
  <else>
    <p>"No $$items!"</p>
  </end>
%%

The same as //((#Include))// but instead of filling a separate template file uses its own code block.

=== If ===
%%(html)
  <if date('d') == 1>
    <p>First day today!</p>
  <elseif date('d') == 32>
    <p>You gotta be kiddin'?!</p>
  <else>
    <p>Today is { date('d.m.Y') }.</p>
  </end>
%%

Takes an arbitrary PHP expression and either executes its block or ignores it (passing on to //else// branches if there are any).

=== Lang ===
%%(html)
  <lang "install_$status" { $fileCount + 1 }>
%%

Outputs a language string with given name. Unlike ((#language)) construct (%%"Anything $here."%%) it doesn't replace %%(php)$variables%% and %%{ code }%% with placeholders but uses that evaluated string as language string's name.

For example, if %%(php)$status%% above is %%success%% then //Lang// will output language string %%install_success%% replacing placeholders (%%:1%%, %%:2%%, etc.) with given unnamed attributes. In this example %%:1%% is replaced with %%{ $fileCount + 1 }%% thus %%install_success%% string can look like this:
%%
  Installation has been successfully finished (:1 files copied).
%%

=== Mailto ===
%%(html)
  <mailto "master@example.com" "Subject line" />
  E-mail the <mailto "master@example.com">webmaster</mailto>
%%

Outputs a "mailto" link with e-mail address obfuscated using HTML entities (%%&#...;%%). Takes up to two ((#defattr default attributes)):
  1. E-mail address;
  2. Optional subject line

Sample generated link:
%%(html)
  <a href="&#109;a&#x69;&#108;&#x74;&#111;:master&#x40;example&#46;com?subject=Subject%20line">master&#x40;example&#46;com</a>
%%
